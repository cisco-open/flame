// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: notification.proto

package notification

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobEventRouteClient is the client API for JobEventRoute service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobEventRouteClient interface {
	// This implements a server side streaming RPC
	GetJobEvent(ctx context.Context, in *JobTaskInfo, opts ...grpc.CallOption) (JobEventRoute_GetJobEventClient, error)
}

type jobEventRouteClient struct {
	cc grpc.ClientConnInterface
}

func NewJobEventRouteClient(cc grpc.ClientConnInterface) JobEventRouteClient {
	return &jobEventRouteClient{cc}
}

func (c *jobEventRouteClient) GetJobEvent(ctx context.Context, in *JobTaskInfo, opts ...grpc.CallOption) (JobEventRoute_GetJobEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &JobEventRoute_ServiceDesc.Streams[0], "/grpcNotification.JobEventRoute/GetJobEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobEventRouteGetJobEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JobEventRoute_GetJobEventClient interface {
	Recv() (*JobEvent, error)
	grpc.ClientStream
}

type jobEventRouteGetJobEventClient struct {
	grpc.ClientStream
}

func (x *jobEventRouteGetJobEventClient) Recv() (*JobEvent, error) {
	m := new(JobEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JobEventRouteServer is the server API for JobEventRoute service.
// All implementations must embed UnimplementedJobEventRouteServer
// for forward compatibility
type JobEventRouteServer interface {
	// This implements a server side streaming RPC
	GetJobEvent(*JobTaskInfo, JobEventRoute_GetJobEventServer) error
	mustEmbedUnimplementedJobEventRouteServer()
}

// UnimplementedJobEventRouteServer must be embedded to have forward compatible implementations.
type UnimplementedJobEventRouteServer struct {
}

func (UnimplementedJobEventRouteServer) GetJobEvent(*JobTaskInfo, JobEventRoute_GetJobEventServer) error {
	return status.Errorf(codes.Unimplemented, "method GetJobEvent not implemented")
}
func (UnimplementedJobEventRouteServer) mustEmbedUnimplementedJobEventRouteServer() {}

// UnsafeJobEventRouteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobEventRouteServer will
// result in compilation errors.
type UnsafeJobEventRouteServer interface {
	mustEmbedUnimplementedJobEventRouteServer()
}

func RegisterJobEventRouteServer(s grpc.ServiceRegistrar, srv JobEventRouteServer) {
	s.RegisterService(&JobEventRoute_ServiceDesc, srv)
}

func _JobEventRoute_GetJobEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JobTaskInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobEventRouteServer).GetJobEvent(m, &jobEventRouteGetJobEventServer{stream})
}

type JobEventRoute_GetJobEventServer interface {
	Send(*JobEvent) error
	grpc.ServerStream
}

type jobEventRouteGetJobEventServer struct {
	grpc.ServerStream
}

func (x *jobEventRouteGetJobEventServer) Send(m *JobEvent) error {
	return x.ServerStream.SendMsg(m)
}

// JobEventRoute_ServiceDesc is the grpc.ServiceDesc for JobEventRoute service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobEventRoute_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcNotification.JobEventRoute",
	HandlerType: (*JobEventRouteServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetJobEvent",
			Handler:       _JobEventRoute_GetJobEvent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "notification.proto",
}

// JobTriggerRouteClient is the client API for JobTriggerRoute service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobTriggerRouteClient interface {
	Notify(ctx context.Context, in *JobEventRequest, opts ...grpc.CallOption) (*JobResponse, error)
}

type jobTriggerRouteClient struct {
	cc grpc.ClientConnInterface
}

func NewJobTriggerRouteClient(cc grpc.ClientConnInterface) JobTriggerRouteClient {
	return &jobTriggerRouteClient{cc}
}

func (c *jobTriggerRouteClient) Notify(ctx context.Context, in *JobEventRequest, opts ...grpc.CallOption) (*JobResponse, error) {
	out := new(JobResponse)
	err := c.cc.Invoke(ctx, "/grpcNotification.JobTriggerRoute/Notify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobTriggerRouteServer is the server API for JobTriggerRoute service.
// All implementations must embed UnimplementedJobTriggerRouteServer
// for forward compatibility
type JobTriggerRouteServer interface {
	Notify(context.Context, *JobEventRequest) (*JobResponse, error)
	mustEmbedUnimplementedJobTriggerRouteServer()
}

// UnimplementedJobTriggerRouteServer must be embedded to have forward compatible implementations.
type UnimplementedJobTriggerRouteServer struct {
}

func (UnimplementedJobTriggerRouteServer) Notify(context.Context, *JobEventRequest) (*JobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedJobTriggerRouteServer) mustEmbedUnimplementedJobTriggerRouteServer() {}

// UnsafeJobTriggerRouteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobTriggerRouteServer will
// result in compilation errors.
type UnsafeJobTriggerRouteServer interface {
	mustEmbedUnimplementedJobTriggerRouteServer()
}

func RegisterJobTriggerRouteServer(s grpc.ServiceRegistrar, srv JobTriggerRouteServer) {
	s.RegisterService(&JobTriggerRoute_ServiceDesc, srv)
}

func _JobTriggerRoute_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobTriggerRouteServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcNotification.JobTriggerRoute/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobTriggerRouteServer).Notify(ctx, req.(*JobEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobTriggerRoute_ServiceDesc is the grpc.ServiceDesc for JobTriggerRoute service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobTriggerRoute_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcNotification.JobTriggerRoute",
	HandlerType: (*JobTriggerRouteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Notify",
			Handler:    _JobTriggerRoute_Notify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notification.proto",
}
