// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: notification.proto

package notification

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobEventRouteClient is the client API for JobEventRoute service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobEventRouteClient interface {
	// This implements a server side streaming RPC
	GetJobEvent(ctx context.Context, in *JobTaskInfo, opts ...grpc.CallOption) (JobEventRoute_GetJobEventClient, error)
}

type jobEventRouteClient struct {
	cc grpc.ClientConnInterface
}

func NewJobEventRouteClient(cc grpc.ClientConnInterface) JobEventRouteClient {
	return &jobEventRouteClient{cc}
}

func (c *jobEventRouteClient) GetJobEvent(ctx context.Context, in *JobTaskInfo, opts ...grpc.CallOption) (JobEventRoute_GetJobEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &JobEventRoute_ServiceDesc.Streams[0], "/grpcNotification.JobEventRoute/GetJobEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobEventRouteGetJobEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JobEventRoute_GetJobEventClient interface {
	Recv() (*JobEvent, error)
	grpc.ClientStream
}

type jobEventRouteGetJobEventClient struct {
	grpc.ClientStream
}

func (x *jobEventRouteGetJobEventClient) Recv() (*JobEvent, error) {
	m := new(JobEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JobEventRouteServer is the server API for JobEventRoute service.
// All implementations must embed UnimplementedJobEventRouteServer
// for forward compatibility
type JobEventRouteServer interface {
	// This implements a server side streaming RPC
	GetJobEvent(*JobTaskInfo, JobEventRoute_GetJobEventServer) error
	mustEmbedUnimplementedJobEventRouteServer()
}

// UnimplementedJobEventRouteServer must be embedded to have forward compatible implementations.
type UnimplementedJobEventRouteServer struct {
}

func (UnimplementedJobEventRouteServer) GetJobEvent(*JobTaskInfo, JobEventRoute_GetJobEventServer) error {
	return status.Errorf(codes.Unimplemented, "method GetJobEvent not implemented")
}
func (UnimplementedJobEventRouteServer) mustEmbedUnimplementedJobEventRouteServer() {}

// UnsafeJobEventRouteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobEventRouteServer will
// result in compilation errors.
type UnsafeJobEventRouteServer interface {
	mustEmbedUnimplementedJobEventRouteServer()
}

func RegisterJobEventRouteServer(s grpc.ServiceRegistrar, srv JobEventRouteServer) {
	s.RegisterService(&JobEventRoute_ServiceDesc, srv)
}

func _JobEventRoute_GetJobEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JobTaskInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobEventRouteServer).GetJobEvent(m, &jobEventRouteGetJobEventServer{stream})
}

type JobEventRoute_GetJobEventServer interface {
	Send(*JobEvent) error
	grpc.ServerStream
}

type jobEventRouteGetJobEventServer struct {
	grpc.ServerStream
}

func (x *jobEventRouteGetJobEventServer) Send(m *JobEvent) error {
	return x.ServerStream.SendMsg(m)
}

// JobEventRoute_ServiceDesc is the grpc.ServiceDesc for JobEventRoute service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobEventRoute_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcNotification.JobEventRoute",
	HandlerType: (*JobEventRouteServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetJobEvent",
			Handler:       _JobEventRoute_GetJobEvent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "notification.proto",
}

// DeployEventRouteClient is the client API for DeployEventRoute service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeployEventRouteClient interface {
	GetDeployEvent(ctx context.Context, in *DeployInfo, opts ...grpc.CallOption) (DeployEventRoute_GetDeployEventClient, error)
}

type deployEventRouteClient struct {
	cc grpc.ClientConnInterface
}

func NewDeployEventRouteClient(cc grpc.ClientConnInterface) DeployEventRouteClient {
	return &deployEventRouteClient{cc}
}

func (c *deployEventRouteClient) GetDeployEvent(ctx context.Context, in *DeployInfo, opts ...grpc.CallOption) (DeployEventRoute_GetDeployEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeployEventRoute_ServiceDesc.Streams[0], "/grpcNotification.DeployEventRoute/GetDeployEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &deployEventRouteGetDeployEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeployEventRoute_GetDeployEventClient interface {
	Recv() (*DeployEvent, error)
	grpc.ClientStream
}

type deployEventRouteGetDeployEventClient struct {
	grpc.ClientStream
}

func (x *deployEventRouteGetDeployEventClient) Recv() (*DeployEvent, error) {
	m := new(DeployEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DeployEventRouteServer is the server API for DeployEventRoute service.
// All implementations must embed UnimplementedDeployEventRouteServer
// for forward compatibility
type DeployEventRouteServer interface {
	GetDeployEvent(*DeployInfo, DeployEventRoute_GetDeployEventServer) error
	mustEmbedUnimplementedDeployEventRouteServer()
}

// UnimplementedDeployEventRouteServer must be embedded to have forward compatible implementations.
type UnimplementedDeployEventRouteServer struct {
}

func (UnimplementedDeployEventRouteServer) GetDeployEvent(*DeployInfo, DeployEventRoute_GetDeployEventServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDeployEvent not implemented")
}
func (UnimplementedDeployEventRouteServer) mustEmbedUnimplementedDeployEventRouteServer() {}

// UnsafeDeployEventRouteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeployEventRouteServer will
// result in compilation errors.
type UnsafeDeployEventRouteServer interface {
	mustEmbedUnimplementedDeployEventRouteServer()
}

func RegisterDeployEventRouteServer(s grpc.ServiceRegistrar, srv DeployEventRouteServer) {
	s.RegisterService(&DeployEventRoute_ServiceDesc, srv)
}

func _DeployEventRoute_GetDeployEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeployInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeployEventRouteServer).GetDeployEvent(m, &deployEventRouteGetDeployEventServer{stream})
}

type DeployEventRoute_GetDeployEventServer interface {
	Send(*DeployEvent) error
	grpc.ServerStream
}

type deployEventRouteGetDeployEventServer struct {
	grpc.ServerStream
}

func (x *deployEventRouteGetDeployEventServer) Send(m *DeployEvent) error {
	return x.ServerStream.SendMsg(m)
}

// DeployEventRoute_ServiceDesc is the grpc.ServiceDesc for DeployEventRoute service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeployEventRoute_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcNotification.DeployEventRoute",
	HandlerType: (*DeployEventRouteServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDeployEvent",
			Handler:       _DeployEventRoute_GetDeployEvent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "notification.proto",
}

// JobTriggerRouteClient is the client API for JobTriggerRoute service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobTriggerRouteClient interface {
	NotifyJob(ctx context.Context, in *JobEventRequest, opts ...grpc.CallOption) (*JobResponse, error)
}

type jobTriggerRouteClient struct {
	cc grpc.ClientConnInterface
}

func NewJobTriggerRouteClient(cc grpc.ClientConnInterface) JobTriggerRouteClient {
	return &jobTriggerRouteClient{cc}
}

func (c *jobTriggerRouteClient) NotifyJob(ctx context.Context, in *JobEventRequest, opts ...grpc.CallOption) (*JobResponse, error) {
	out := new(JobResponse)
	err := c.cc.Invoke(ctx, "/grpcNotification.JobTriggerRoute/NotifyJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobTriggerRouteServer is the server API for JobTriggerRoute service.
// All implementations must embed UnimplementedJobTriggerRouteServer
// for forward compatibility
type JobTriggerRouteServer interface {
	NotifyJob(context.Context, *JobEventRequest) (*JobResponse, error)
	mustEmbedUnimplementedJobTriggerRouteServer()
}

// UnimplementedJobTriggerRouteServer must be embedded to have forward compatible implementations.
type UnimplementedJobTriggerRouteServer struct {
}

func (UnimplementedJobTriggerRouteServer) NotifyJob(context.Context, *JobEventRequest) (*JobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyJob not implemented")
}
func (UnimplementedJobTriggerRouteServer) mustEmbedUnimplementedJobTriggerRouteServer() {}

// UnsafeJobTriggerRouteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobTriggerRouteServer will
// result in compilation errors.
type UnsafeJobTriggerRouteServer interface {
	mustEmbedUnimplementedJobTriggerRouteServer()
}

func RegisterJobTriggerRouteServer(s grpc.ServiceRegistrar, srv JobTriggerRouteServer) {
	s.RegisterService(&JobTriggerRoute_ServiceDesc, srv)
}

func _JobTriggerRoute_NotifyJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobTriggerRouteServer).NotifyJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcNotification.JobTriggerRoute/NotifyJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobTriggerRouteServer).NotifyJob(ctx, req.(*JobEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobTriggerRoute_ServiceDesc is the grpc.ServiceDesc for JobTriggerRoute service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobTriggerRoute_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcNotification.JobTriggerRoute",
	HandlerType: (*JobTriggerRouteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyJob",
			Handler:    _JobTriggerRoute_NotifyJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notification.proto",
}

// DeployTriggerRouteClient is the client API for DeployTriggerRoute service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeployTriggerRouteClient interface {
	NotifyDeploy(ctx context.Context, in *DeployEventRequest, opts ...grpc.CallOption) (*DeployResponse, error)
}

type deployTriggerRouteClient struct {
	cc grpc.ClientConnInterface
}

func NewDeployTriggerRouteClient(cc grpc.ClientConnInterface) DeployTriggerRouteClient {
	return &deployTriggerRouteClient{cc}
}

func (c *deployTriggerRouteClient) NotifyDeploy(ctx context.Context, in *DeployEventRequest, opts ...grpc.CallOption) (*DeployResponse, error) {
	out := new(DeployResponse)
	err := c.cc.Invoke(ctx, "/grpcNotification.DeployTriggerRoute/NotifyDeploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeployTriggerRouteServer is the server API for DeployTriggerRoute service.
// All implementations must embed UnimplementedDeployTriggerRouteServer
// for forward compatibility
type DeployTriggerRouteServer interface {
	NotifyDeploy(context.Context, *DeployEventRequest) (*DeployResponse, error)
	mustEmbedUnimplementedDeployTriggerRouteServer()
}

// UnimplementedDeployTriggerRouteServer must be embedded to have forward compatible implementations.
type UnimplementedDeployTriggerRouteServer struct {
}

func (UnimplementedDeployTriggerRouteServer) NotifyDeploy(context.Context, *DeployEventRequest) (*DeployResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyDeploy not implemented")
}
func (UnimplementedDeployTriggerRouteServer) mustEmbedUnimplementedDeployTriggerRouteServer() {}

// UnsafeDeployTriggerRouteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeployTriggerRouteServer will
// result in compilation errors.
type UnsafeDeployTriggerRouteServer interface {
	mustEmbedUnimplementedDeployTriggerRouteServer()
}

func RegisterDeployTriggerRouteServer(s grpc.ServiceRegistrar, srv DeployTriggerRouteServer) {
	s.RegisterService(&DeployTriggerRoute_ServiceDesc, srv)
}

func _DeployTriggerRoute_NotifyDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployTriggerRouteServer).NotifyDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcNotification.DeployTriggerRoute/NotifyDeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployTriggerRouteServer).NotifyDeploy(ctx, req.(*DeployEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeployTriggerRoute_ServiceDesc is the grpc.ServiceDesc for DeployTriggerRoute service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeployTriggerRoute_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcNotification.DeployTriggerRoute",
	HandlerType: (*DeployTriggerRouteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyDeploy",
			Handler:    _DeployTriggerRoute_NotifyDeploy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notification.proto",
}
