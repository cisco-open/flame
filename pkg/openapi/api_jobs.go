// Copyright (c) 2021 Cisco Systems, Inc. and its affiliates
// All rights reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * Fledge REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"mime"
	"mime/multipart"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A JobsApiController binds http requests to an api service and writes the service results to the http response
type JobsApiController struct {
	service JobsApiServicer
}

// NewJobsApiController creates a default api controller
func NewJobsApiController(s JobsApiServicer) Router {
	return &JobsApiController{service: s}
}

// Routes returns all of the api route for the JobsApiController
func (c *JobsApiController) Routes() Routes {
	return Routes{
		{
			"CreateJob",
			strings.ToUpper("Post"),
			"/{user}/jobs",
			c.CreateJob,
		},
		{
			"DeleteJob",
			strings.ToUpper("Delete"),
			"/{user}/jobs/{jobId}",
			c.DeleteJob,
		},
		{
			"GetJob",
			strings.ToUpper("Get"),
			"/{user}/jobs/{jobId}",
			c.GetJob,
		},
		{
			"GetJobStatus",
			strings.ToUpper("Get"),
			"/{user}/jobs/{jobId}/status",
			c.GetJobStatus,
		},
		{
			"GetJobsStatus",
			strings.ToUpper("Get"),
			"/{user}/jobs/status",
			c.GetJobsStatus,
		},
		{
			"GetTask",
			strings.ToUpper("Get"),
			"/jobs/{jobId}/{agentId}/task",
			c.GetTask,
		},
		{
			"UpdateJob",
			strings.ToUpper("Put"),
			"/{user}/jobs/{jobId}",
			c.UpdateJob,
		},
		{
			"UpdateJobStatus",
			strings.ToUpper("Put"),
			"/{user}/jobs/{jobId}/status",
			c.UpdateJobStatus,
		},
		{
			"UpdateTaskStatus",
			strings.ToUpper("Put"),
			"/jobs/{jobId}/{agentId}/task/status",
			c.UpdateTaskStatus,
		},
	}
}

// CreateJob - Create a new job specification
func (c *JobsApiController) CreateJob(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	user := params["user"]

	jobSpec := &JobSpec{}
	if err := json.NewDecoder(r.Body).Decode(&jobSpec); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.CreateJob(r.Context(), user, *jobSpec)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteJob - Delete job specification
func (c *JobsApiController) DeleteJob(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	user := params["user"]

	jobId := params["jobId"]

	result, err := c.service.DeleteJob(r.Context(), user, jobId)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetJob - Get a job specification
func (c *JobsApiController) GetJob(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	user := params["user"]

	jobId := params["jobId"]

	result, err := c.service.GetJob(r.Context(), user, jobId)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetJobStatus - Get job status of a given jobId
func (c *JobsApiController) GetJobStatus(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	user := params["user"]

	jobId := params["jobId"]

	result, err := c.service.GetJobStatus(r.Context(), user, jobId)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetJobsStatus - Get status info on all the jobs owned by user
func (c *JobsApiController) GetJobsStatus(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	user := params["user"]

	limit, err := parseInt32Parameter(query.Get("limit"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.GetJobsStatus(r.Context(), user, limit)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetTask - Get a job task for a given job and agent
func (c *JobsApiController) GetTask(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	jobId := params["jobId"]

	agentId := params["agentId"]

	result, err := c.service.GetTask(r.Context(), jobId, agentId)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}

	mediatype, _, err := mime.ParseMediaType(r.Header.Get("Accept"))
	if err != nil {
		code := http.StatusNotAcceptable
		EncodeJSONResponse(err.Error(), &code, w)
		return
	}
	if mediatype != "multipart/form-data" {
		code := http.StatusMultipleChoices
		EncodeJSONResponse("set Accept: multipart/form-data", &code, w)
		return
	}

	mw := multipart.NewWriter(w)
	w.Header().Set("Content-Type", mw.FormDataContentType())

	taskMap, ok := result.Body.(map[string][]byte)
	if !ok {
		code := http.StatusNotFound
		EncodeJSONResponse("task object not found", &code, w)
		return
	}

	w.Header().Set("Content-Type", mw.FormDataContentType())
	for filename, data := range taskMap {
		fw, err := mw.CreateFormFile(filename, filename)
		if err != nil {
			code := http.StatusInternalServerError
			EncodeJSONResponse(err.Error(), &code, w)
			return
		}
		if _, err := fw.Write(data); err != nil {
			code := http.StatusInternalServerError
			EncodeJSONResponse(err.Error(), &code, w)
			return
		}
	}

	if err := mw.Close(); err != nil {
		code := http.StatusInternalServerError
		EncodeJSONResponse(err.Error(), &code, w)
		return
	}

	w.WriteHeader(result.Code)
}

// UpdateJob - Update a job specification
func (c *JobsApiController) UpdateJob(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	user := params["user"]

	jobId := params["jobId"]

	jobSpec := &JobSpec{}
	if err := json.NewDecoder(r.Body).Decode(&jobSpec); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.UpdateJob(r.Context(), user, jobId, *jobSpec)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateJobStatus - Update a job's status
func (c *JobsApiController) UpdateJobStatus(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	user := params["user"]

	jobId := params["jobId"]

	jobStatus := &JobStatus{}
	if err := json.NewDecoder(r.Body).Decode(&jobStatus); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.UpdateJobStatus(r.Context(), user, jobId, *jobStatus)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateTaskStatus - Update the status of a task
func (c *JobsApiController) UpdateTaskStatus(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	jobId := params["jobId"]

	agentId := params["agentId"]

	taskStatus := &TaskStatus{}
	if err := json.NewDecoder(r.Body).Decode(&taskStatus); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.UpdateTaskStatus(r.Context(), jobId, agentId, *taskStatus)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
