// Copyright 2022 Cisco Systems, Inc. and its affiliates
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

/*
 * Flame REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"time"
)

// TaskInfo - Task information
type TaskInfo struct {
	JobId string `json:"jobId"`

	TaskId string `json:"taskId"`

	Role string `json:"role"`

	GroupAssociation map[string]string `json:"groupAssociation"`

	Key string `json:"key,omitempty"`

	State JobState `json:"state"`

	ComputeId string `json:"computeId,omitempty"`

	Log string `json:"log,omitempty"`

	Timestamp time.Time `json:"timestamp,omitempty"`
}

// AssertTaskInfoRequired checks if the required fields are not zero-ed
func AssertTaskInfoRequired(obj TaskInfo) error {
	elements := map[string]interface{}{
		"jobId":            obj.JobId,
		"taskId":           obj.TaskId,
		"role":             obj.Role,
		"groupAssociation": obj.GroupAssociation,
		"state":            obj.State,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseTaskInfoRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of TaskInfo (e.g. [][]TaskInfo), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseTaskInfoRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aTaskInfo, ok := obj.(TaskInfo)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertTaskInfoRequired(aTaskInfo)
	})
}
