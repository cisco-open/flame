// Copyright 2022 Cisco Systems, Inc. and its affiliates
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

/*
 * Flame REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A DesignSchemasApiController binds http requests to an api service and writes the service results to the http response
type DesignSchemasApiController struct {
	service DesignSchemasApiServicer
}

// NewDesignSchemasApiController creates a default api controller
func NewDesignSchemasApiController(s DesignSchemasApiServicer) Router {
	return &DesignSchemasApiController{service: s}
}

// Routes returns all of the api route for the DesignSchemasApiController
func (c *DesignSchemasApiController) Routes() Routes {
	return Routes{
		{
			"CreateDesignSchema",
			strings.ToUpper("Post"),
			"/{user}/designs/{designId}/schemas",
			c.CreateDesignSchema,
		},
		{
			"GetDesignSchema",
			strings.ToUpper("Get"),
			"/{user}/designs/{designId}/schemas/{version}",
			c.GetDesignSchema,
		},
		{
			"GetDesignSchemas",
			strings.ToUpper("Get"),
			"/{user}/designs/{designId}/schemas",
			c.GetDesignSchemas,
		},
		{
			"UpdateDesignSchema",
			strings.ToUpper("Put"),
			"/{user}/designs/{designId}/schemas/{version}",
			c.UpdateDesignSchema,
		},
	}
}

// CreateDesignSchema - Update a design schema
func (c *DesignSchemasApiController) CreateDesignSchema(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	user := params["user"]

	designId := params["designId"]

	designSchema := &DesignSchema{}
	if err := json.NewDecoder(r.Body).Decode(&designSchema); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.CreateDesignSchema(r.Context(), user, designId, *designSchema)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetDesignSchema - Get a design schema owned by user
func (c *DesignSchemasApiController) GetDesignSchema(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	user := params["user"]

	designId := params["designId"]

	version := params["version"]

	result, err := c.service.GetDesignSchema(r.Context(), user, designId, version)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetDesignSchemas - Get all design schemas in a design
func (c *DesignSchemasApiController) GetDesignSchemas(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	user := params["user"]

	designId := params["designId"]

	result, err := c.service.GetDesignSchemas(r.Context(), user, designId)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateDesignSchema - Update a schema for a given design
func (c *DesignSchemasApiController) UpdateDesignSchema(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	user := params["user"]

	designId := params["designId"]

	version := params["version"]

	designSchema := &DesignSchema{}
	if err := json.NewDecoder(r.Body).Decode(&designSchema); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.UpdateDesignSchema(r.Context(), user, designId, version, *designSchema)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
