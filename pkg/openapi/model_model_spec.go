//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

/*
 * Flame REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// ModelSpec - Model specification
type ModelSpec struct {
	BaseModel BaseModel `json:"baseModel,omitempty"`

	Optimizer Optimizer `json:"optimizer,omitempty"`

	Selector Selector `json:"selector,omitempty"`

	Hyperparameters map[string]interface{} `json:"hyperparameters,omitempty"`

	Dependencies []string `json:"dependencies,omitempty"`
}

// AssertModelSpecRequired checks if the required fields are not zero-ed
func AssertModelSpecRequired(obj ModelSpec) error {
	if err := AssertBaseModelRequired(obj.BaseModel); err != nil {
		return err
	}
	if err := AssertOptimizerRequired(obj.Optimizer); err != nil {
		return err
	}
	if err := AssertSelectorRequired(obj.Selector); err != nil {
		return err
	}
	return nil
}

// AssertRecurseModelSpecRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of ModelSpec (e.g. [][]ModelSpec), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseModelSpecRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aModelSpec, ok := obj.(ModelSpec)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertModelSpecRequired(aModelSpec)
	})
}
