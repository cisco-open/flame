# Copyright 2022 Cisco Systems, Inc. and its affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: backend_msg.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()

DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(
    b'\n\x11\x62\x61\x63kend_msg.proto\x12\x07\x62\x61\x63kend\"\x19\n\x07\x43onnect\x12\x0e\n\x06\x65nd_id\x18\x01 \x01(\t\"Q\n\x06Notify\x12\x0e\n\x06\x65nd_id\x18\x01 \x01(\t\x12\x14\n\x0c\x63hannel_name\x18\x02 \x01(\t\x12!\n\x04type\x18\x03 \x01(\x0e\x32\x13.backend.NotifyType\"Y\n\x04\x44\x61ta\x12\x0e\n\x06\x65nd_id\x18\x01 \x01(\t\x12\x14\n\x0c\x63hannel_name\x18\x02 \x01(\t\x12\r\n\x05seqno\x18\x03 \x01(\x05\x12\x0b\n\x03\x65om\x18\x04 \x01(\x08\x12\x0f\n\x07payload\x18\x05 \x01(\x0c*:\n\nNotifyType\x12\x17\n\x13UNKNOWN_NOTIFY_TYPE\x10\x00\x12\x08\n\x04JOIN\x10\x01\x12\t\n\x05LEAVE\x10\x02\x62\x06proto3'
)

_NOTIFYTYPE = DESCRIPTOR.enum_types_by_name['NotifyType']
NotifyType = enum_type_wrapper.EnumTypeWrapper(_NOTIFYTYPE)
UNKNOWN_NOTIFY_TYPE = 0
JOIN = 1
LEAVE = 2

_CONNECT = DESCRIPTOR.message_types_by_name['Connect']
_NOTIFY = DESCRIPTOR.message_types_by_name['Notify']
_DATA = DESCRIPTOR.message_types_by_name['Data']
Connect = _reflection.GeneratedProtocolMessageType(
    'Connect',
    (_message.Message, ),
    {
        'DESCRIPTOR': _CONNECT,
        '__module__': 'backend_msg_pb2'
        # @@protoc_insertion_point(class_scope:backend.Connect)
    })
_sym_db.RegisterMessage(Connect)

Notify = _reflection.GeneratedProtocolMessageType('Notify', (_message.Message,), {
  'DESCRIPTOR' : _NOTIFY,
  '__module__' : 'backend_msg_pb2'
  # @@protoc_insertion_point(class_scope:backend.Notify)
  })
_sym_db.RegisterMessage(Notify)

Data = _reflection.GeneratedProtocolMessageType('Data', (_message.Message,), {
  'DESCRIPTOR' : _DATA,
  '__module__' : 'backend_msg_pb2'
  # @@protoc_insertion_point(class_scope:backend.Data)
  })
_sym_db.RegisterMessage(Data)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _NOTIFYTYPE._serialized_start=231
  _NOTIFYTYPE._serialized_end=289
  _CONNECT._serialized_start=30
  _CONNECT._serialized_end=55
  _NOTIFY._serialized_start=57
  _NOTIFY._serialized_end=138
  _DATA._serialized_start=140
  _DATA._serialized_end=229
# @@protoc_insertion_point(module_scope)
