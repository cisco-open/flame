# Copyright 2022 Cisco Systems, Inc. and its affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import meta_pb2 as meta__pb2


class MetaRouteStub(object):
    """Meta info related route
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterMetaInfo = channel.unary_unary(
            '/grpcMeta.MetaRoute/RegisterMetaInfo',
            request_serializer=meta__pb2.MetaInfo.SerializeToString,
            response_deserializer=meta__pb2.MetaResponse.FromString,
        )
        self.HeartBeat = channel.unary_unary(
            '/grpcMeta.MetaRoute/HeartBeat',
            request_serializer=meta__pb2.MetaInfo.SerializeToString,
            response_deserializer=meta__pb2.MetaResponse.FromString,
        )


class MetaRouteServicer(object):
    """Meta info related route
    """

    def RegisterMetaInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HeartBeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MetaRouteServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterMetaInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterMetaInfo,
                    request_deserializer=meta__pb2.MetaInfo.FromString,
                    response_serializer=meta__pb2.MetaResponse.SerializeToString,
            ),
            'HeartBeat': grpc.unary_unary_rpc_method_handler(
                    servicer.HeartBeat,
                    request_deserializer=meta__pb2.MetaInfo.FromString,
                    response_serializer=meta__pb2.MetaResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpcMeta.MetaRoute', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MetaRoute(object):
    """Meta info related route
    """

    @staticmethod
    def RegisterMetaInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpcMeta.MetaRoute/RegisterMetaInfo',
            meta__pb2.MetaInfo.SerializeToString,
            meta__pb2.MetaResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HeartBeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpcMeta.MetaRoute/HeartBeat',
            meta__pb2.MetaInfo.SerializeToString,
            meta__pb2.MetaResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
